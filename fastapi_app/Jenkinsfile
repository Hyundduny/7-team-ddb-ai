pipeline {
    agent any

    environment {
        SERVICE_NAME    = 'ai'
        PROJECT_ID      = 'dolpin-2nd'
        REGION          = 'asia-northeast3'
        GAR_HOST        = 'asia-northeast3-docker.pkg.dev'
        CONTAINER_NAME  = 'ai'
        PORT            = '8000'
        SSH_USER        = 'peter'
        AI_ZONE          = 'asia-northeast3-a'  
    }

    stages {
        stage('Set Branch & Cron Trigger') {
            steps {
                script {
                    def branchName = env.BRANCH_NAME ?: env.GIT_BRANCH?.replaceFirst(/^origin\//, '')
                    env.BRANCH = branchName

                    if (branchName == 'main') {
                        properties([pipelineTriggers([cron('30 0 * * 1-5')])])
                    } else if (branchName == 'dev') {
                        properties([pipelineTriggers([
                            cron('30 3 * * 1-4'),
                            cron('00 00 * * 5'),
                            cron('30 3 * * 6,7')
                        ])])
                    } else {
                        properties([pipelineTriggers([])])
                        echo "⛔ 지원되지 않는 브랜치입니다: ${branchName}. 빌드를 중단합니다."
                        currentBuild.result = 'NOT_BUILT'
                        error("Unsupported branch: ${branchName}")
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup Environment by Branch') {
            steps {
                script {
                    if (env.BRANCH == 'main') {
                        env.ENV_LABEL = 'prod'
                        env.REPO_NAME = 'dolpin-docker-image-prod'
                        env.AI_INSTANCE_NAME = 'ai-instance-prod'        
                    } else {
                        env.ENV_LABEL = 'dev'
                        env.REPO_NAME = 'dolpin-docker-image-dev'
                        env.AI_INSTANCE_NAME = 'ai-instance-dev' 
                    }

                    env.TAG = "${env.SERVICE_NAME}:${env.BUILD_NUMBER}"
                    env.GAR_IMAGE = "${env.GAR_HOST}/${env.PROJECT_ID}/${env.REPO_NAME}/${env.TAG}"
                }
            }
        }

        stage('Notify Before Start') {
            when {
                expression { env.BRANCH in ['main', 'dev'] }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
                        discordSend(
                            description: "🚀 배포가 곧 시작됩니다: ${env.SERVICE_NAME} - ${env.BRANCH} 브랜치",
                            link: env.BUILD_URL,
                            title: "배포 시작",
                            webhookURL: "$DISCORD"
                        )
                    }
                }
            }
        }

        stage('Download Model from GCS') {
            steps {
                dir('fastapi_app') {
                    script {
                        withCredentials([
                            file(credentialsId: 'gcp-sa-key', variable: 'GCP_KEY_FILE')
                        ]) {
                            sh """
                            gcloud auth activate-service-account --key-file=${GCP_KEY_FILE}
                            gcloud config set project ${env.PROJECT_ID}

                            mkdir -p model
                            gsutil -m cp -r gs://static-backup-bucket/embedding_model/krsbert_tokenizer model/
                            gsutil -m cp gs://static-backup-bucket/embedding_model/snunlp_KR-SBERT-V40K-klueNLI-* model/
                            """
                        }
                    }
                }
            }
        }

        stage('GAR 인증') {
            steps {
                sh "gcloud auth configure-docker ${env.GAR_HOST} --quiet"
            }
        }

        stage('Docker Build & Push to GAR') {
            steps {
                dir('fastapi_app') {
                    sh """
                        docker build -t ${env.GAR_IMAGE} .
                        docker push ${env.GAR_IMAGE}
                    """
                }
            }
        }

        stage('Deploy to AI via IAP') {
            steps {
                script {
                    def credId = env.BRANCH == 'main' ? 'ai-sa-key-prod' : 'ai-sa-key-dev'
                    def envFileId = env.BRANCH == 'main' ? 'ai-prod-file' : 'ai-dev-file'

                    // GCP Secret Manager에서 서비스 계정 키 다운로드
                    sh """
                    gcloud secrets versions access latest \
                    --secret="${credId}" \
                    --project="${env.PROJECT_ID}" > gcp-key.json
                    """

                    withCredentials([
                        file(credentialsId: envFileId, variable: 'ENV_FILE'),
                    ]) {
                        def deployScript = """
#!/bin/bash
set -e

mv /tmp/.env /home/${env.SSH_USER}/.env
mv /tmp/gcp-key.json /home/${env.SSH_USER}/gcp-key.json
chown ${env.SSH_USER}:${env.SSH_USER} /home/${env.SSH_USER}/.env /home/${env.SSH_USER}/gcp-key.json
chmod 600 /home/${env.SSH_USER}/.env /home/${env.SSH_USER}/gcp-key.json

export HOME=/home/${env.SSH_USER}
gcloud auth activate-service-account --key-file="/home/${env.SSH_USER}/gcp-key.json"
gcloud config set project ${env.PROJECT_ID} --quiet
gcloud auth configure-docker ${env.GAR_HOST} --quiet
gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${env.GAR_HOST}

docker stop ${env.CONTAINER_NAME} || true
docker rm ${env.CONTAINER_NAME} || true

docker system prune -a --volumes -f
docker pull ${env.GAR_IMAGE}

docker run -d --name ${env.CONTAINER_NAME} \\
  --env-file /home/${env.SSH_USER}/.env \\
  -v /home/${env.SSH_USER}/logs:/app/logs \\
  -p ${env.PORT}:${env.PORT} \\
  ${env.GAR_IMAGE}
"""
                        writeFile file: 'deploy.sh', text: deployScript

                        sh """
gcloud compute scp \$ENV_FILE ${env.SSH_USER}@${env.AI_INSTANCE_NAME}:/tmp/.env \
  --project=${env.PROJECT_ID} --zone=${env.AI_ZONE} --tunnel-through-iap

gcloud compute scp gcp-key.json ${env.SSH_USER}@${env.AI_INSTANCE_NAME}:/tmp/gcp-key.json \
  --project=${env.PROJECT_ID} --zone=${env.AI_ZONE} --tunnel-through-iap

gcloud compute scp deploy.sh ${env.SSH_USER}@${env.AI_INSTANCE_NAME}:/tmp/deploy.sh \
  --project=${env.PROJECT_ID} --zone=${env.AI_ZONE} --tunnel-through-iap

gcloud compute ssh ${env.SSH_USER}@${env.AI_INSTANCE_NAME} \
  --project=${env.PROJECT_ID} --zone=${env.AI_ZONE} \
  --tunnel-through-iap --command="bash /tmp/deploy.sh"
"""
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                if (env.BRANCH in ['main', 'dev']) {
                    withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
                        discordSend description: """
                        제목 : ${currentBuild.displayName}
                        결과 : ${currentBuild.result}
                        실행 시간 : ${currentBuild.duration / 1000}s
                        """,
                        link: env.BUILD_URL, result: currentBuild.currentResult,
                        title: "${env.JOB_NAME} : ${currentBuild.displayName} 성공",
                        webhookURL: "$DISCORD"
                    }
                }
            }
        }
        failure {
            script {
                if (env.BRANCH in ['main', 'dev']) {
                    withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
                        discordSend description: """
                        제목 : ${currentBuild.displayName}
                        결과 : ${currentBuild.result}
                        실행 시간 : ${currentBuild.duration / 1000}s
                        """,
                        link: env.BUILD_URL, result: currentBuild.currentResult,
                        title: "${env.JOB_NAME} : ${currentBuild.displayName} 실패",
                        webhookURL: "$DISCORD"
                    }
                }
            }
        }
    }
}